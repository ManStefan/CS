// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package csdemo.intersectiondemo_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.rowcompare;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: intersectiondemo Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.0.1.20150908_1633
 * @status 
 */
public class intersectiondemo implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (FileParam1 != null) {

				this.setProperty("FileParam1", FileParam1.toString());

			}

			if (FileParam2 != null) {

				this.setProperty("FileParam2", FileParam2.toString());

			}

			if (DestFile1 != null) {

				this.setProperty("DestFile1", DestFile1.toString());

			}

		}

		public String FileParam1;

		public String getFileParam1() {
			return this.FileParam1;
		}

		public String FileParam2;

		public String getFileParam2() {
			return this.FileParam2;
		}

		public String DestFile1;

		public String getDestFile1() {
			return this.DestFile1;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "intersectiondemo";
	private final String projectName = "CSDEMO";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					intersectiondemo.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(intersectiondemo.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_customers_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("1 : " + context.FileParam1);
				System.out.println("2 :" + context.FileParam2);
				System.out.println("3 :" + context.DestFile1);

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				tFileInputExcel_1Process(globalMap);

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_CSDEMO_intersectiondemo = new byte[0];
		static byte[] commonByteArray_CSDEMO_intersectiondemo = new byte[0];

		public Integer people_id;

		public Integer getPeople_id() {
			return this.people_id;
		}

		public String first_name;

		public String getFirst_name() {
			return this.first_name;
		}

		public String last_name;

		public String getLast_name() {
			return this.last_name;
		}

		public Integer customer_id;

		public Integer getCustomer_id() {
			return this.customer_id;
		}

		public Character initial;

		public Character getInitial() {
			return this.initial;
		}

		public String address_field_1;

		public String getAddress_field_1() {
			return this.address_field_1;
		}

		public String address_field_2;

		public String getAddress_field_2() {
			return this.address_field_2;
		}

		public java.util.Date registration_date_str;

		public java.util.Date getRegistration_date_str() {
			return this.registration_date_str;
		}

		public String registration_date;

		public String getRegistration_date() {
			return this.registration_date;
		}

		public String customer_account_manager;

		public String getCustomer_account_manager() {
			return this.customer_account_manager;
		}

		public Float customer_score;

		public Float getCustomer_score() {
			return this.customer_score;
		}

		public Integer customer_contract_value;

		public Integer getCustomer_contract_value() {
			return this.customer_contract_value;
		}

		public java.util.Date customer_contract_date_str;

		public java.util.Date getCustomer_contract_date_str() {
			return this.customer_contract_date_str;
		}

		public String customer_contract_date;

		public String getCustomer_contract_date() {
			return this.customer_contract_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CSDEMO_intersectiondemo.length) {
					if (length < 1024
							&& commonByteArray_CSDEMO_intersectiondemo.length == 0) {
						commonByteArray_CSDEMO_intersectiondemo = new byte[1024];
					} else {
						commonByteArray_CSDEMO_intersectiondemo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CSDEMO_intersectiondemo, 0,
						length);
				strReturn = new String(commonByteArray_CSDEMO_intersectiondemo,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CSDEMO_intersectiondemo) {

				try {

					int length = 0;

					this.people_id = readInteger(dis);

					this.first_name = readString(dis);

					this.last_name = readString(dis);

					this.customer_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.initial = null;
					} else {
						this.initial = dis.readChar();
					}

					this.address_field_1 = readString(dis);

					this.address_field_2 = readString(dis);

					this.registration_date_str = readDate(dis);

					this.registration_date = readString(dis);

					this.customer_account_manager = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.customer_score = null;
					} else {
						this.customer_score = dis.readFloat();
					}

					this.customer_contract_value = readInteger(dis);

					this.customer_contract_date_str = readDate(dis);

					this.customer_contract_date = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.people_id, dos);

				// String

				writeString(this.first_name, dos);

				// String

				writeString(this.last_name, dos);

				// Integer

				writeInteger(this.customer_id, dos);

				// Character

				if (this.initial == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.initial);
				}

				// String

				writeString(this.address_field_1, dos);

				// String

				writeString(this.address_field_2, dos);

				// java.util.Date

				writeDate(this.registration_date_str, dos);

				// String

				writeString(this.registration_date, dos);

				// String

				writeString(this.customer_account_manager, dos);

				// Float

				if (this.customer_score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.customer_score);
				}

				// Integer

				writeInteger(this.customer_contract_value, dos);

				// java.util.Date

				writeDate(this.customer_contract_date_str, dos);

				// String

				writeString(this.customer_contract_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("people_id=" + String.valueOf(people_id));
			sb.append(",first_name=" + first_name);
			sb.append(",last_name=" + last_name);
			sb.append(",customer_id=" + String.valueOf(customer_id));
			sb.append(",initial=" + String.valueOf(initial));
			sb.append(",address_field_1=" + address_field_1);
			sb.append(",address_field_2=" + address_field_2);
			sb.append(",registration_date_str="
					+ String.valueOf(registration_date_str));
			sb.append(",registration_date=" + registration_date);
			sb.append(",customer_account_manager=" + customer_account_manager);
			sb.append(",customer_score=" + String.valueOf(customer_score));
			sb.append(",customer_contract_value="
					+ String.valueOf(customer_contract_value));
			sb.append(",customer_contract_date_str="
					+ String.valueOf(customer_contract_date_str));
			sb.append(",customer_contract_date=" + customer_contract_date);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class testStruct implements
			routines.system.IPersistableRow<testStruct> {
		final static byte[] commonByteArrayLock_CSDEMO_intersectiondemo = new byte[0];
		static byte[] commonByteArray_CSDEMO_intersectiondemo = new byte[0];

		public Integer people_id;

		public Integer getPeople_id() {
			return this.people_id;
		}

		public String first_name;

		public String getFirst_name() {
			return this.first_name;
		}

		public String last_name;

		public String getLast_name() {
			return this.last_name;
		}

		public Integer customer_id;

		public Integer getCustomer_id() {
			return this.customer_id;
		}

		public Character initial;

		public Character getInitial() {
			return this.initial;
		}

		public String address_field_1;

		public String getAddress_field_1() {
			return this.address_field_1;
		}

		public String address_field_2;

		public String getAddress_field_2() {
			return this.address_field_2;
		}

		public java.util.Date registration_date_str;

		public java.util.Date getRegistration_date_str() {
			return this.registration_date_str;
		}

		public String registration_date;

		public String getRegistration_date() {
			return this.registration_date;
		}

		public String customer_account_manager;

		public String getCustomer_account_manager() {
			return this.customer_account_manager;
		}

		public Float customer_score;

		public Float getCustomer_score() {
			return this.customer_score;
		}

		public Integer customer_contract_value;

		public Integer getCustomer_contract_value() {
			return this.customer_contract_value;
		}

		public java.util.Date customer_contract_date_str;

		public java.util.Date getCustomer_contract_date_str() {
			return this.customer_contract_date_str;
		}

		public String customer_contract_date;

		public String getCustomer_contract_date() {
			return this.customer_contract_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CSDEMO_intersectiondemo.length) {
					if (length < 1024
							&& commonByteArray_CSDEMO_intersectiondemo.length == 0) {
						commonByteArray_CSDEMO_intersectiondemo = new byte[1024];
					} else {
						commonByteArray_CSDEMO_intersectiondemo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CSDEMO_intersectiondemo, 0,
						length);
				strReturn = new String(commonByteArray_CSDEMO_intersectiondemo,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CSDEMO_intersectiondemo) {

				try {

					int length = 0;

					this.people_id = readInteger(dis);

					this.first_name = readString(dis);

					this.last_name = readString(dis);

					this.customer_id = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.initial = null;
					} else {
						this.initial = dis.readChar();
					}

					this.address_field_1 = readString(dis);

					this.address_field_2 = readString(dis);

					this.registration_date_str = readDate(dis);

					this.registration_date = readString(dis);

					this.customer_account_manager = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.customer_score = null;
					} else {
						this.customer_score = dis.readFloat();
					}

					this.customer_contract_value = readInteger(dis);

					this.customer_contract_date_str = readDate(dis);

					this.customer_contract_date = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.people_id, dos);

				// String

				writeString(this.first_name, dos);

				// String

				writeString(this.last_name, dos);

				// Integer

				writeInteger(this.customer_id, dos);

				// Character

				if (this.initial == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.initial);
				}

				// String

				writeString(this.address_field_1, dos);

				// String

				writeString(this.address_field_2, dos);

				// java.util.Date

				writeDate(this.registration_date_str, dos);

				// String

				writeString(this.registration_date, dos);

				// String

				writeString(this.customer_account_manager, dos);

				// Float

				if (this.customer_score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.customer_score);
				}

				// Integer

				writeInteger(this.customer_contract_value, dos);

				// java.util.Date

				writeDate(this.customer_contract_date_str, dos);

				// String

				writeString(this.customer_contract_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("people_id=" + String.valueOf(people_id));
			sb.append(",first_name=" + first_name);
			sb.append(",last_name=" + last_name);
			sb.append(",customer_id=" + String.valueOf(customer_id));
			sb.append(",initial=" + String.valueOf(initial));
			sb.append(",address_field_1=" + address_field_1);
			sb.append(",address_field_2=" + address_field_2);
			sb.append(",registration_date_str="
					+ String.valueOf(registration_date_str));
			sb.append(",registration_date=" + registration_date);
			sb.append(",customer_account_manager=" + customer_account_manager);
			sb.append(",customer_score=" + String.valueOf(customer_score));
			sb.append(",customer_contract_value="
					+ String.valueOf(customer_contract_value));
			sb.append(",customer_contract_date_str="
					+ String.valueOf(customer_contract_date_str));
			sb.append(",customer_contract_date=" + customer_contract_date);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(testStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class peopleStruct implements
			routines.system.IPersistableRow<peopleStruct> {
		final static byte[] commonByteArrayLock_CSDEMO_intersectiondemo = new byte[0];
		static byte[] commonByteArray_CSDEMO_intersectiondemo = new byte[0];

		public Integer surrogate_id;

		public Integer getSurrogate_id() {
			return this.surrogate_id;
		}

		public Integer source_id;

		public Integer getSource_id() {
			return this.source_id;
		}

		public String first_name;

		public String getFirst_name() {
			return this.first_name;
		}

		public String last_name;

		public String getLast_name() {
			return this.last_name;
		}

		public Character initial;

		public Character getInitial() {
			return this.initial;
		}

		public String address_field_1;

		public String getAddress_field_1() {
			return this.address_field_1;
		}

		public String address_field_2;

		public String getAddress_field_2() {
			return this.address_field_2;
		}

		public java.util.Date registration_date_str;

		public java.util.Date getRegistration_date_str() {
			return this.registration_date_str;
		}

		public String registration_date;

		public String getRegistration_date() {
			return this.registration_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CSDEMO_intersectiondemo.length) {
					if (length < 1024
							&& commonByteArray_CSDEMO_intersectiondemo.length == 0) {
						commonByteArray_CSDEMO_intersectiondemo = new byte[1024];
					} else {
						commonByteArray_CSDEMO_intersectiondemo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CSDEMO_intersectiondemo, 0,
						length);
				strReturn = new String(commonByteArray_CSDEMO_intersectiondemo,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CSDEMO_intersectiondemo) {

				try {

					int length = 0;

					this.surrogate_id = readInteger(dis);

					this.source_id = readInteger(dis);

					this.first_name = readString(dis);

					this.last_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.initial = null;
					} else {
						this.initial = dis.readChar();
					}

					this.address_field_1 = readString(dis);

					this.address_field_2 = readString(dis);

					this.registration_date_str = readDate(dis);

					this.registration_date = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.surrogate_id, dos);

				// Integer

				writeInteger(this.source_id, dos);

				// String

				writeString(this.first_name, dos);

				// String

				writeString(this.last_name, dos);

				// Character

				if (this.initial == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.initial);
				}

				// String

				writeString(this.address_field_1, dos);

				// String

				writeString(this.address_field_2, dos);

				// java.util.Date

				writeDate(this.registration_date_str, dos);

				// String

				writeString(this.registration_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("surrogate_id=" + String.valueOf(surrogate_id));
			sb.append(",source_id=" + String.valueOf(source_id));
			sb.append(",first_name=" + first_name);
			sb.append(",last_name=" + last_name);
			sb.append(",initial=" + String.valueOf(initial));
			sb.append(",address_field_1=" + address_field_1);
			sb.append(",address_field_2=" + address_field_2);
			sb.append(",registration_date_str="
					+ String.valueOf(registration_date_str));
			sb.append(",registration_date=" + registration_date);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(peopleStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputExcel_1Struct implements
			routines.system.IPersistableRow<after_tFileInputExcel_1Struct> {
		final static byte[] commonByteArrayLock_CSDEMO_intersectiondemo = new byte[0];
		static byte[] commonByteArray_CSDEMO_intersectiondemo = new byte[0];

		public Integer surrogate_id;

		public Integer getSurrogate_id() {
			return this.surrogate_id;
		}

		public Integer source_id;

		public Integer getSource_id() {
			return this.source_id;
		}

		public String first_name;

		public String getFirst_name() {
			return this.first_name;
		}

		public String last_name;

		public String getLast_name() {
			return this.last_name;
		}

		public Character initial;

		public Character getInitial() {
			return this.initial;
		}

		public String address_field_1;

		public String getAddress_field_1() {
			return this.address_field_1;
		}

		public String address_field_2;

		public String getAddress_field_2() {
			return this.address_field_2;
		}

		public java.util.Date registration_date_str;

		public java.util.Date getRegistration_date_str() {
			return this.registration_date_str;
		}

		public String registration_date;

		public String getRegistration_date() {
			return this.registration_date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CSDEMO_intersectiondemo.length) {
					if (length < 1024
							&& commonByteArray_CSDEMO_intersectiondemo.length == 0) {
						commonByteArray_CSDEMO_intersectiondemo = new byte[1024];
					} else {
						commonByteArray_CSDEMO_intersectiondemo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CSDEMO_intersectiondemo, 0,
						length);
				strReturn = new String(commonByteArray_CSDEMO_intersectiondemo,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CSDEMO_intersectiondemo) {

				try {

					int length = 0;

					this.surrogate_id = readInteger(dis);

					this.source_id = readInteger(dis);

					this.first_name = readString(dis);

					this.last_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.initial = null;
					} else {
						this.initial = dis.readChar();
					}

					this.address_field_1 = readString(dis);

					this.address_field_2 = readString(dis);

					this.registration_date_str = readDate(dis);

					this.registration_date = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.surrogate_id, dos);

				// Integer

				writeInteger(this.source_id, dos);

				// String

				writeString(this.first_name, dos);

				// String

				writeString(this.last_name, dos);

				// Character

				if (this.initial == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.initial);
				}

				// String

				writeString(this.address_field_1, dos);

				// String

				writeString(this.address_field_2, dos);

				// java.util.Date

				writeDate(this.registration_date_str, dos);

				// String

				writeString(this.registration_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("surrogate_id=" + String.valueOf(surrogate_id));
			sb.append(",source_id=" + String.valueOf(source_id));
			sb.append(",first_name=" + first_name);
			sb.append(",last_name=" + last_name);
			sb.append(",initial=" + String.valueOf(initial));
			sb.append(",address_field_1=" + address_field_1);
			sb.append(",address_field_2=" + address_field_2);
			sb.append(",registration_date_str="
					+ String.valueOf(registration_date_str));
			sb.append(",registration_date=" + registration_date);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputExcel_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputExcel_2Process(globalMap);

				peopleStruct people = new peopleStruct();
				testStruct test = new testStruct();
				testStruct row3 = test;

				/**
				 * [tFileOutputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_1", false);
				start_Hash
						.put("tFileOutputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_1";

				int tos_count_tFileOutputExcel_1 = 0;

				int columnIndex_tFileOutputExcel_1 = 0;

				String fileName_tFileOutputExcel_1 = context.DestFile1;
				int nb_line_tFileOutputExcel_1 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_1.setSheet("Sheet1");
				xlsxTool_tFileOutputExcel_1.setAppend(false, false);
				xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_1.setXY(false, 0, 0, false);

				xlsxTool_tFileOutputExcel_1
						.prepareXlsxFile(fileName_tFileOutputExcel_1);

				xlsxTool_tFileOutputExcel_1.setFont("");

				if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0) {

					xlsxTool_tFileOutputExcel_1.addRow();

					xlsxTool_tFileOutputExcel_1.addCellValue("people_id");

					xlsxTool_tFileOutputExcel_1.addCellValue("first_name");

					xlsxTool_tFileOutputExcel_1.addCellValue("last_name");

					xlsxTool_tFileOutputExcel_1.addCellValue("customer_id");

					xlsxTool_tFileOutputExcel_1.addCellValue("initial");

					xlsxTool_tFileOutputExcel_1.addCellValue("address_field_1");

					xlsxTool_tFileOutputExcel_1.addCellValue("address_field_2");

					xlsxTool_tFileOutputExcel_1
							.addCellValue("registration_date_str");

					xlsxTool_tFileOutputExcel_1
							.addCellValue("registration_date");

					xlsxTool_tFileOutputExcel_1
							.addCellValue("customer_account_manager");

					xlsxTool_tFileOutputExcel_1.addCellValue("customer_score");

					xlsxTool_tFileOutputExcel_1
							.addCellValue("customer_contract_value");

					xlsxTool_tFileOutputExcel_1
							.addCellValue("customer_contract_date_str");

					xlsxTool_tFileOutputExcel_1
							.addCellValue("customer_contract_date");

					nb_line_tFileOutputExcel_1++;

				}

				/**
				 * [tFileOutputExcel_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[14];

					public void addRow(String[] row) {

						for (int i = 0; i < 14; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 13 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 13 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(
									new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(),
									(Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0]
								- fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[13]
								- fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("Check log");
				util_tLogRow_1
						.addRow(new String[] { "people_id", "first_name",
								"last_name", "customer_id", "initial",
								"address_field_1", "address_field_2",
								"registration_date_str", "registration_date",
								"customer_account_manager", "customer_score",
								"customer_contract_value",
								"customer_contract_date_str",
								"customer_contract_date", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<customersStruct> tHash_Lookup_customers = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<customersStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<customersStruct>) globalMap
						.get("tHash_Lookup_customers"));

				customersStruct customersHashKey = new customersStruct();
				customersStruct customersDefault = new customersStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				testStruct test_tmp = new testStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				Object source_tFileInputExcel_1 = context.FileParam1;
				com.talend.excel.xssf.event.ExcelReader excelReader_tFileInputExcel_1 = null;

				if (source_tFileInputExcel_1 instanceof java.io.InputStream
						|| source_tFileInputExcel_1 instanceof String) {
					excelReader_tFileInputExcel_1 = new com.talend.excel.xssf.event.ExcelReader();
				} else {
					throw new java.lang.Exception(
							"The data source should be specified as Inputstream or File Path!");
				}

				try {
					excelReader_tFileInputExcel_1.addSheetName(".*", true);
					int start_column_tFileInputExcel_1 = 1 - 1;
					int end_column_tFileInputExcel_1 = -1;
					if (start_column_tFileInputExcel_1 >= 0) {// follow start
																// column

						end_column_tFileInputExcel_1 = start_column_tFileInputExcel_1 + 9 - 1;

					} else if (end_column_tFileInputExcel_1 >= 0) {// follow end
																	// column
						start_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 - 9 + 1;
					}

					if (end_column_tFileInputExcel_1 < 0
							|| start_column_tFileInputExcel_1 < 0) {
						throw new RuntimeException(
								"Error start column and end column.");
					}
					int actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1;

					int header_tFileInputExcel_1 = 1;
					int limit_tFileInputExcel_1 = -1;

					int nb_line_tFileInputExcel_1 = 0;

					// for the number format
					java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
							"#.####################################");
					char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1
							.getDecimalFormatSymbols().getDecimalSeparator();

					if (source_tFileInputExcel_1 instanceof String) {
						excelReader_tFileInputExcel_1.parse(
								(String) source_tFileInputExcel_1, "UTF-8");
					} else if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
						excelReader_tFileInputExcel_1.parse(
								(java.io.InputStream) source_tFileInputExcel_1,
								"UTF-8");
					}

					while ((header_tFileInputExcel_1--) > 0
							&& excelReader_tFileInputExcel_1.hasNext()) {// skip
																			// the
																			// header
						excelReader_tFileInputExcel_1.next();
					}

					while (excelReader_tFileInputExcel_1.hasNext()) {
						int emptyColumnCount_tFileInputExcel_1 = 0;

						if (limit_tFileInputExcel_1 != -1
								&& nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
							excelReader_tFileInputExcel_1.stopRead();
							break;
						}

						java.util.List<String> row_tFileInputExcel_1 = excelReader_tFileInputExcel_1
								.next();
						people = null;
						int tempRowLength_tFileInputExcel_1 = 9;

						int columnIndex_tFileInputExcel_1 = 0;

						String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];

						for (int i_tFileInputExcel_1 = 0; i_tFileInputExcel_1 < tempRowLength_tFileInputExcel_1; i_tFileInputExcel_1++) {
							int current_tFileInputExcel_1 = i_tFileInputExcel_1
									+ start_column_tFileInputExcel_1;
							if (current_tFileInputExcel_1 <= actual_end_column_tFileInputExcel_1) {
								if (current_tFileInputExcel_1 < row_tFileInputExcel_1
										.size()) {
									String column_tFileInputExcel_1 = row_tFileInputExcel_1
											.get(current_tFileInputExcel_1);
									if (column_tFileInputExcel_1 != null) {
										temp_row_tFileInputExcel_1[i_tFileInputExcel_1] = column_tFileInputExcel_1;
									} else {
										temp_row_tFileInputExcel_1[i_tFileInputExcel_1] = "";
									}
								} else {
									temp_row_tFileInputExcel_1[i_tFileInputExcel_1] = "";
								}
							} else {
								temp_row_tFileInputExcel_1[i_tFileInputExcel_1] = "";
							}
						}

						boolean whetherReject_tFileInputExcel_1 = false;
						people = new peopleStruct();
						int curColNum_tFileInputExcel_1 = -1;
						String curColName_tFileInputExcel_1 = "";

						try {
							columnIndex_tFileInputExcel_1 = 0;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "surrogate_id";

								people.surrogate_id = ParserUtils
										.parseTo_Integer(ParserUtils
												.parseTo_Number(
														temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
																.trim(),
														null,
														'.' == decimalChar_tFileInputExcel_1 ? null
																: decimalChar_tFileInputExcel_1));
							} else {
								people.surrogate_id = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 1;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "source_id";

								people.source_id = ParserUtils
										.parseTo_Integer(ParserUtils
												.parseTo_Number(
														temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
																.trim(),
														null,
														'.' == decimalChar_tFileInputExcel_1 ? null
																: decimalChar_tFileInputExcel_1));
							} else {
								people.source_id = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 2;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "first_name";

								people.first_name = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								people.first_name = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 3;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "last_name";

								people.last_name = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								people.last_name = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 4;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "initial";

								people.initial = ParserUtils
										.parseTo_Character(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
												.trim());
							} else {
								people.initial = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 5;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "address_field_1";

								people.address_field_1 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								people.address_field_1 = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 6;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "address_field_2";

								people.address_field_2 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								people.address_field_2 = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 7;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "registration_date_str";

								try {
									people.registration_date_str = ParserUtils
											.parseTo_Date(
													temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
															.trim(), "yyyyMMdd");
								} catch (java.lang.Exception e) {

									throw new RuntimeException(
											"The cell format is not Date in ( Row. "
													+ (nb_line_tFileInputExcel_1 + 1)
													+ " and ColumnNum. "
													+ curColNum_tFileInputExcel_1
													+ " )");
								}

							} else {
								people.registration_date_str = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 8;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "registration_date";

								people.registration_date = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								people.registration_date = null;
								emptyColumnCount_tFileInputExcel_1++;
							}

							nb_line_tFileInputExcel_1++;

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputExcel_1 = true;
							System.err.println(e.getMessage());
							people = null;
						}

						/**
						 * [tFileInputExcel_1 begin ] stop
						 */

						/**
						 * [tFileInputExcel_1 main ] start
						 */

						currentComponent = "tFileInputExcel_1";

						tos_count_tFileInputExcel_1++;

						/**
						 * [tFileInputExcel_1 main ] stop
						 */
						// Start of branch "people"
						if (people != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "customers"
							// /////////////////////////////////////////////

							boolean forceLoopcustomers = false;

							customersStruct customersObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								customersHashKey.first_name = people.first_name;

								customersHashKey.last_name = people.last_name;

								customersHashKey.hashCodeDirty = true;

								tHash_Lookup_customers.lookup(customersHashKey);

								if (!tHash_Lookup_customers.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_1 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_customers != null
									&& tHash_Lookup_customers
											.getCount(customersHashKey) > 1) { // G
																				// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'customers' and it contains more one result from keys :  customers.first_name = '"
								// + customersHashKey.first_name +
								// "', customers.last_name = '" +
								// customersHashKey.last_name + "'");
							} // G 071

							customersStruct customers = null;

							customersStruct fromLookup_customers = null;
							customers = customersDefault;

							if (tHash_Lookup_customers != null
									&& tHash_Lookup_customers.hasNext()) { // G
																			// 099

								fromLookup_customers = tHash_Lookup_customers
										.next();

							} // G 099

							if (fromLookup_customers != null) {
								customers = fromLookup_customers;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								test = null;

								if (!rejectedInnerJoin_tMap_1) {

									// # Output table : 'test'
									test_tmp.people_id = people.surrogate_id;
									test_tmp.first_name = people.first_name;
									test_tmp.last_name = people.last_name;
									test_tmp.customer_id = customers.surrogate_id;
									test_tmp.initial = people.initial;
									test_tmp.address_field_1 = people.address_field_1;
									test_tmp.address_field_2 = people.address_field_2;
									test_tmp.registration_date_str = people.registration_date_str;
									test_tmp.registration_date = people.registration_date;
									test_tmp.customer_account_manager = customers.account_manager;
									test_tmp.customer_score = customers.customer_score;
									test_tmp.customer_contract_value = customers.contract_value;
									test_tmp.customer_contract_date_str = customers.contract_date_str;
									test_tmp.customer_contract_date = customers.contract_date;
									test = test_tmp;
								} // closing inner join bracket (2)
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "test"
							if (test != null) {

								/**
								 * [tLogRow_1 main ] start
								 */

								currentComponent = "tLogRow_1";

								// /////////////////////

								String[] row_tLogRow_1 = new String[14];

								if (test.people_id != null) { //
									row_tLogRow_1[0] = String
											.valueOf(test.people_id);

								} //

								if (test.first_name != null) { //
									row_tLogRow_1[1] = String
											.valueOf(test.first_name);

								} //

								if (test.last_name != null) { //
									row_tLogRow_1[2] = String
											.valueOf(test.last_name);

								} //

								if (test.customer_id != null) { //
									row_tLogRow_1[3] = String
											.valueOf(test.customer_id);

								} //

								if (test.initial != null) { //
									row_tLogRow_1[4] = String
											.valueOf(test.initial);

								} //

								if (test.address_field_1 != null) { //
									row_tLogRow_1[5] = String
											.valueOf(test.address_field_1);

								} //

								if (test.address_field_2 != null) { //
									row_tLogRow_1[6] = String
											.valueOf(test.address_field_2);

								} //

								if (test.registration_date_str != null) { //
									row_tLogRow_1[7] = FormatterUtils
											.format_Date(
													test.registration_date_str,
													"yyyyMMdd");

								} //

								if (test.registration_date != null) { //
									row_tLogRow_1[8] = String
											.valueOf(test.registration_date);

								} //

								if (test.customer_account_manager != null) { //
									row_tLogRow_1[9] = String
											.valueOf(test.customer_account_manager);

								} //

								if (test.customer_score != null) { //
									row_tLogRow_1[10] = FormatterUtils
											.formatUnwithE(test.customer_score);

								} //

								if (test.customer_contract_value != null) { //
									row_tLogRow_1[11] = String
											.valueOf(test.customer_contract_value);

								} //

								if (test.customer_contract_date_str != null) { //
									row_tLogRow_1[12] = FormatterUtils
											.format_Date(
													test.customer_contract_date_str,
													"yyyyMMdd");

								} //

								if (test.customer_contract_date != null) { //
									row_tLogRow_1[13] = String
											.valueOf(test.customer_contract_date);

								} //

								util_tLogRow_1.addRow(row_tLogRow_1);
								nb_line_tLogRow_1++;
								// ////

								// ////

								// /////////////////////

								row3 = test;

								tos_count_tLogRow_1++;

								/**
								 * [tLogRow_1 main ] stop
								 */

								/**
								 * [tFileOutputExcel_1 main ] start
								 */

								currentComponent = "tFileOutputExcel_1";

								xlsxTool_tFileOutputExcel_1.addRow();

								if (row3.people_id != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(Double.parseDouble(String
													.valueOf(row3.people_id)));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (row3.first_name != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(String
													.valueOf(row3.first_name));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (row3.last_name != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(String
													.valueOf(row3.last_name));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (row3.customer_id != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(Double.parseDouble(String
													.valueOf(row3.customer_id)));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (row3.initial != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(String
													.valueOf(row3.initial));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (row3.address_field_1 != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(String
													.valueOf(row3.address_field_1));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (row3.address_field_2 != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(String
													.valueOf(row3.address_field_2));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (row3.registration_date_str != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(
											row3.registration_date_str,
											"yyyyMMdd");
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (row3.registration_date != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(String
													.valueOf(row3.registration_date));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (row3.customer_account_manager != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(String
													.valueOf(row3.customer_account_manager));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (row3.customer_score != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(Double.parseDouble(String
													.valueOf(row3.customer_score)));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (row3.customer_contract_value != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(Double.parseDouble(String
													.valueOf(row3.customer_contract_value)));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (row3.customer_contract_date_str != null) {

									xlsxTool_tFileOutputExcel_1.addCellValue(
											row3.customer_contract_date_str,
											"yyyyMMdd");
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (row3.customer_contract_date != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(String
													.valueOf(row3.customer_contract_date));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								nb_line_tFileOutputExcel_1++;

								tos_count_tFileOutputExcel_1++;

								/**
								 * [tFileOutputExcel_1 main ] stop
								 */

							} // End of branch "test"

						} // End of branch "people"

						/**
						 * [tFileInputExcel_1 end ] start
						 */

						currentComponent = "tFileInputExcel_1";

					}

					try {
						if (excelReader_tFileInputExcel_1 != null) {
							excelReader_tFileInputExcel_1.handleException();
						}
					} catch (java.lang.Exception e_tFileInputExcel_1) {
						if (!(e_tFileInputExcel_1.getCause() instanceof com.talend.excel.xssf.event.EnoughDataException)) {

							System.err
									.println(e_tFileInputExcel_1.getMessage());

						}
					}

					globalMap.put("tFileInputExcel_1_NB_LINE",
							nb_line_tFileInputExcel_1);

				} finally {

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_customers != null) {
					tHash_Lookup_customers.endGet();
				}
				globalMap.remove("tHash_Lookup_customers");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1
						.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tFileOutputExcel_1 end ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				xlsxTool_tFileOutputExcel_1.writeExcel(
						fileName_tFileOutputExcel_1, true);

				nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 - 1;

				globalMap.put("tFileOutputExcel_1_NB_LINE",
						nb_line_tFileOutputExcel_1);

				ok_Hash.put("tFileOutputExcel_1", true);
				end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_customers");

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_1 finally ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				/**
				 * [tFileOutputExcel_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public static class customersStruct implements
			routines.system.IPersistableComparableLookupRow<customersStruct> {
		final static byte[] commonByteArrayLock_CSDEMO_intersectiondemo = new byte[0];
		static byte[] commonByteArray_CSDEMO_intersectiondemo = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer surrogate_id;

		public Integer getSurrogate_id() {
			return this.surrogate_id;
		}

		public Integer source_id;

		public Integer getSource_id() {
			return this.source_id;
		}

		public String first_name;

		public String getFirst_name() {
			return this.first_name;
		}

		public String last_name;

		public String getLast_name() {
			return this.last_name;
		}

		public Character initial;

		public Character getInitial() {
			return this.initial;
		}

		public String address_field_1;

		public String getAddress_field_1() {
			return this.address_field_1;
		}

		public String address_field_2;

		public String getAddress_field_2() {
			return this.address_field_2;
		}

		public String account_manager;

		public String getAccount_manager() {
			return this.account_manager;
		}

		public Float customer_score;

		public Float getCustomer_score() {
			return this.customer_score;
		}

		public Integer contract_value;

		public Integer getContract_value() {
			return this.contract_value;
		}

		public java.util.Date contract_date_str;

		public java.util.Date getContract_date_str() {
			return this.contract_date_str;
		}

		public String contract_date;

		public String getContract_date() {
			return this.contract_date;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.first_name == null) ? 0 : this.first_name
								.hashCode());

				result = prime
						* result
						+ ((this.last_name == null) ? 0 : this.last_name
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final customersStruct other = (customersStruct) obj;

			if (this.first_name == null) {
				if (other.first_name != null)
					return false;

			} else if (!this.first_name.equals(other.first_name))

				return false;

			if (this.last_name == null) {
				if (other.last_name != null)
					return false;

			} else if (!this.last_name.equals(other.last_name))

				return false;

			return true;
		}

		public void copyDataTo(customersStruct other) {

			other.surrogate_id = this.surrogate_id;
			other.source_id = this.source_id;
			other.first_name = this.first_name;
			other.last_name = this.last_name;
			other.initial = this.initial;
			other.address_field_1 = this.address_field_1;
			other.address_field_2 = this.address_field_2;
			other.account_manager = this.account_manager;
			other.customer_score = this.customer_score;
			other.contract_value = this.contract_value;
			other.contract_date_str = this.contract_date_str;
			other.contract_date = this.contract_date;

		}

		public void copyKeysDataTo(customersStruct other) {

			other.first_name = this.first_name;
			other.last_name = this.last_name;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CSDEMO_intersectiondemo.length) {
					if (length < 1024
							&& commonByteArray_CSDEMO_intersectiondemo.length == 0) {
						commonByteArray_CSDEMO_intersectiondemo = new byte[1024];
					} else {
						commonByteArray_CSDEMO_intersectiondemo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CSDEMO_intersectiondemo, 0,
						length);
				strReturn = new String(commonByteArray_CSDEMO_intersectiondemo,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CSDEMO_intersectiondemo) {

				try {

					int length = 0;

					this.first_name = readString(dis);

					this.last_name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.first_name, dos);

				// String

				writeString(this.last_name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.surrogate_id = readInteger(dis, ois);

				this.source_id = readInteger(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.initial = null;
				} else {
					this.initial = dis.readChar();
				}

				this.address_field_1 = readString(dis, ois);

				this.address_field_2 = readString(dis, ois);

				this.account_manager = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.customer_score = null;
				} else {
					this.customer_score = dis.readFloat();
				}

				this.contract_value = readInteger(dis, ois);

				this.contract_date_str = readDate(dis, ois);

				this.contract_date = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.surrogate_id, dos, oos);

				writeInteger(this.source_id, dos, oos);

				if (this.initial == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.initial);
				}

				writeString(this.address_field_1, dos, oos);

				writeString(this.address_field_2, dos, oos);

				writeString(this.account_manager, dos, oos);

				if (this.customer_score == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.customer_score);
				}

				writeInteger(this.contract_value, dos, oos);

				writeDate(this.contract_date_str, dos, oos);

				writeString(this.contract_date, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("surrogate_id=" + String.valueOf(surrogate_id));
			sb.append(",source_id=" + String.valueOf(source_id));
			sb.append(",first_name=" + first_name);
			sb.append(",last_name=" + last_name);
			sb.append(",initial=" + String.valueOf(initial));
			sb.append(",address_field_1=" + address_field_1);
			sb.append(",address_field_2=" + address_field_2);
			sb.append(",account_manager=" + account_manager);
			sb.append(",customer_score=" + String.valueOf(customer_score));
			sb.append(",contract_value=" + String.valueOf(contract_value));
			sb.append(",contract_date_str=" + String.valueOf(contract_date_str));
			sb.append(",contract_date=" + contract_date);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(customersStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.first_name,
					other.first_name);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.last_name, other.last_name);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				customersStruct customers = new customersStruct();

				/**
				 * [tAdvancedHash_customers begin ] start
				 */

				ok_Hash.put("tAdvancedHash_customers", false);
				start_Hash.put("tAdvancedHash_customers",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_customers";

				int tos_count_tAdvancedHash_customers = 0;

				// connection name:customers
				// source node:tFileInputExcel_2 -
				// inputs:(after_tFileInputExcel_1)
				// outputs:(customers,customers) | target
				// node:tAdvancedHash_customers - inputs:(customers) outputs:()
				// linked node: tMap_1 - inputs:(people,customers)
				// outputs:(test)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_customers = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<customersStruct> tHash_Lookup_customers = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<customersStruct> getLookup(matchingModeEnum_customers);

				globalMap.put("tHash_Lookup_customers", tHash_Lookup_customers);

				/**
				 * [tAdvancedHash_customers begin ] stop
				 */

				/**
				 * [tFileInputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_2", false);
				start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_2";

				int tos_count_tFileInputExcel_2 = 0;

				Object source_tFileInputExcel_2 = context.FileParam2;
				com.talend.excel.xssf.event.ExcelReader excelReader_tFileInputExcel_2 = null;

				if (source_tFileInputExcel_2 instanceof java.io.InputStream
						|| source_tFileInputExcel_2 instanceof String) {
					excelReader_tFileInputExcel_2 = new com.talend.excel.xssf.event.ExcelReader();
				} else {
					throw new java.lang.Exception(
							"The data source should be specified as Inputstream or File Path!");
				}

				try {
					excelReader_tFileInputExcel_2.addSheetName(".*", true);
					int start_column_tFileInputExcel_2 = 1 - 1;
					int end_column_tFileInputExcel_2 = -1;
					if (start_column_tFileInputExcel_2 >= 0) {// follow start
																// column

						end_column_tFileInputExcel_2 = start_column_tFileInputExcel_2 + 12 - 1;

					} else if (end_column_tFileInputExcel_2 >= 0) {// follow end
																	// column
						start_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 - 12 + 1;
					}

					if (end_column_tFileInputExcel_2 < 0
							|| start_column_tFileInputExcel_2 < 0) {
						throw new RuntimeException(
								"Error start column and end column.");
					}
					int actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2;

					int header_tFileInputExcel_2 = 1;
					int limit_tFileInputExcel_2 = -1;

					int nb_line_tFileInputExcel_2 = 0;

					// for the number format
					java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat(
							"#.####################################");
					char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2
							.getDecimalFormatSymbols().getDecimalSeparator();

					if (source_tFileInputExcel_2 instanceof String) {
						excelReader_tFileInputExcel_2.parse(
								(String) source_tFileInputExcel_2, "UTF-8");
					} else if (source_tFileInputExcel_2 instanceof java.io.InputStream) {
						excelReader_tFileInputExcel_2.parse(
								(java.io.InputStream) source_tFileInputExcel_2,
								"UTF-8");
					}

					while ((header_tFileInputExcel_2--) > 0
							&& excelReader_tFileInputExcel_2.hasNext()) {// skip
																			// the
																			// header
						excelReader_tFileInputExcel_2.next();
					}

					while (excelReader_tFileInputExcel_2.hasNext()) {
						int emptyColumnCount_tFileInputExcel_2 = 0;

						if (limit_tFileInputExcel_2 != -1
								&& nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
							excelReader_tFileInputExcel_2.stopRead();
							break;
						}

						java.util.List<String> row_tFileInputExcel_2 = excelReader_tFileInputExcel_2
								.next();
						customers = null;
						customers = null;
						int tempRowLength_tFileInputExcel_2 = 12;

						int columnIndex_tFileInputExcel_2 = 0;

						String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];

						for (int i_tFileInputExcel_2 = 0; i_tFileInputExcel_2 < tempRowLength_tFileInputExcel_2; i_tFileInputExcel_2++) {
							int current_tFileInputExcel_2 = i_tFileInputExcel_2
									+ start_column_tFileInputExcel_2;
							if (current_tFileInputExcel_2 <= actual_end_column_tFileInputExcel_2) {
								if (current_tFileInputExcel_2 < row_tFileInputExcel_2
										.size()) {
									String column_tFileInputExcel_2 = row_tFileInputExcel_2
											.get(current_tFileInputExcel_2);
									if (column_tFileInputExcel_2 != null) {
										temp_row_tFileInputExcel_2[i_tFileInputExcel_2] = column_tFileInputExcel_2;
									} else {
										temp_row_tFileInputExcel_2[i_tFileInputExcel_2] = "";
									}
								} else {
									temp_row_tFileInputExcel_2[i_tFileInputExcel_2] = "";
								}
							} else {
								temp_row_tFileInputExcel_2[i_tFileInputExcel_2] = "";
							}
						}

						boolean whetherReject_tFileInputExcel_2 = false;
						customers = new customersStruct();
						int curColNum_tFileInputExcel_2 = -1;
						String curColName_tFileInputExcel_2 = "";

						try {
							columnIndex_tFileInputExcel_2 = 0;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "surrogate_id";

								customers.surrogate_id = ParserUtils
										.parseTo_Integer(ParserUtils
												.parseTo_Number(
														temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2],
														null,
														'.' == decimalChar_tFileInputExcel_2 ? null
																: decimalChar_tFileInputExcel_2));
							} else {
								customers.surrogate_id = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 1;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "source_id";

								customers.source_id = ParserUtils
										.parseTo_Integer(ParserUtils
												.parseTo_Number(
														temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2],
														null,
														'.' == decimalChar_tFileInputExcel_2 ? null
																: decimalChar_tFileInputExcel_2));
							} else {
								customers.source_id = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 2;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "first_name";

								customers.first_name = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
							} else {
								customers.first_name = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 3;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "last_name";

								customers.last_name = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
							} else {
								customers.last_name = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 4;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "initial";

								customers.initial = ParserUtils
										.parseTo_Character(temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]);
							} else {
								customers.initial = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 5;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "address_field_1";

								customers.address_field_1 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
							} else {
								customers.address_field_1 = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 6;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "address_field_2";

								customers.address_field_2 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
							} else {
								customers.address_field_2 = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 7;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "account_manager";

								customers.account_manager = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
							} else {
								customers.account_manager = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 8;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "customer_score";

								customers.customer_score = ParserUtils
										.parseTo_Float(ParserUtils
												.parseTo_Number(
														temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2],
														null,
														'.' == decimalChar_tFileInputExcel_2 ? null
																: decimalChar_tFileInputExcel_2));
							} else {
								customers.customer_score = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 9;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "contract_value";

								customers.contract_value = ParserUtils
										.parseTo_Integer(ParserUtils
												.parseTo_Number(
														temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2],
														null,
														'.' == decimalChar_tFileInputExcel_2 ? null
																: decimalChar_tFileInputExcel_2));
							} else {
								customers.contract_value = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 10;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "contract_date_str";

								try {
									customers.contract_date_str = ParserUtils
											.parseTo_Date(
													temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2],
													"yyyyMMdd");
								} catch (java.lang.Exception e) {

									throw new RuntimeException(
											"The cell format is not Date in ( Row. "
													+ (nb_line_tFileInputExcel_2 + 1)
													+ " and ColumnNum. "
													+ curColNum_tFileInputExcel_2
													+ " )");
								}

							} else {
								customers.contract_date_str = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 11;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "contract_date";

								customers.contract_date = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
							} else {
								customers.contract_date = null;
								emptyColumnCount_tFileInputExcel_2++;
							}

							nb_line_tFileInputExcel_2++;

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputExcel_2 = true;
							System.err.println(e.getMessage());
							customers = null;
						}

						/**
						 * [tFileInputExcel_2 begin ] stop
						 */

						/**
						 * [tFileInputExcel_2 main ] start
						 */

						currentComponent = "tFileInputExcel_2";

						tos_count_tFileInputExcel_2++;

						/**
						 * [tFileInputExcel_2 main ] stop
						 */
						// Start of branch "customers"
						if (customers != null) {

							/**
							 * [tAdvancedHash_customers main ] start
							 */

							currentComponent = "tAdvancedHash_customers";

							customersStruct customers_HashRow = new customersStruct();

							customers_HashRow.surrogate_id = customers.surrogate_id;

							customers_HashRow.source_id = customers.source_id;

							customers_HashRow.first_name = customers.first_name;

							customers_HashRow.last_name = customers.last_name;

							customers_HashRow.initial = customers.initial;

							customers_HashRow.address_field_1 = customers.address_field_1;

							customers_HashRow.address_field_2 = customers.address_field_2;

							customers_HashRow.account_manager = customers.account_manager;

							customers_HashRow.customer_score = customers.customer_score;

							customers_HashRow.contract_value = customers.contract_value;

							customers_HashRow.contract_date_str = customers.contract_date_str;

							customers_HashRow.contract_date = customers.contract_date;

							tHash_Lookup_customers.put(customers_HashRow);

							tos_count_tAdvancedHash_customers++;

							/**
							 * [tAdvancedHash_customers main ] stop
							 */

						} // End of branch "customers"

						/**
						 * [tFileInputExcel_2 end ] start
						 */

						currentComponent = "tFileInputExcel_2";

					}

					try {
						if (excelReader_tFileInputExcel_2 != null) {
							excelReader_tFileInputExcel_2.handleException();
						}
					} catch (java.lang.Exception e_tFileInputExcel_2) {
						if (!(e_tFileInputExcel_2.getCause() instanceof com.talend.excel.xssf.event.EnoughDataException)) {

							System.err
									.println(e_tFileInputExcel_2.getMessage());

						}
					}

					globalMap.put("tFileInputExcel_2_NB_LINE",
							nb_line_tFileInputExcel_2);

				} finally {

				}

				ok_Hash.put("tFileInputExcel_2", true);
				end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_customers end ] start
				 */

				currentComponent = "tAdvancedHash_customers";

				tHash_Lookup_customers.endPut();

				ok_Hash.put("tAdvancedHash_customers", true);
				end_Hash.put("tAdvancedHash_customers",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_customers end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_2 finally ] start
				 */

				currentComponent = "tFileInputExcel_2";

				/**
				 * [tFileInputExcel_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_customers finally ] start
				 */

				currentComponent = "tAdvancedHash_customers";

				/**
				 * [tAdvancedHash_customers finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final intersectiondemo intersectiondemoClass = new intersectiondemo();

		int exitCode = intersectiondemoClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = intersectiondemo.class
					.getClassLoader().getResourceAsStream(
							"csdemo/intersectiondemo_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.FileParam1 = (String) context.getProperty("FileParam1");
			context.FileParam2 = (String) context.getProperty("FileParam2");
			context.DestFile1 = (String) context.getProperty("DestFile1");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("FileParam1")) {
				context.FileParam1 = (String) parentContextMap
						.get("FileParam1");
			}
			if (parentContextMap.containsKey("FileParam2")) {
				context.FileParam2 = (String) parentContextMap
						.get("FileParam2");
			}
			if (parentContextMap.containsKey("DestFile1")) {
				context.DestFile1 = (String) parentContextMap.get("DestFile1");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

			e_tJava_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : intersectiondemo");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 124424 characters generated by Talend Open Studio for Data Integration on the
 * September 24, 2015 3:10:59 PM EEST
 ************************************************************************************************/
